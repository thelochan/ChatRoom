{"version":3,"sources":["components/LoginForm.jsx","components/MessageForm.jsx","components/TheirMessage.jsx","components/MyMessage.jsx","components/ChatFeed.jsx","App.js","index.js"],"names":["LoginForm","useState","username","setUsername","password","setPassword","error","setError","handleSubmit","e","a","preventDefault","authObject","axios","get","headers","localStorage","setItem","window","location","reload","className","onSubmit","type","value","onChange","target","placeholder","required","align","MessageForm","props","setValue","chatId","creds","event","text","trim","length","sendMessage","isTyping","htmlFor","clasName","PictureOutlined","multiple","id","style","display","files","SendOutlined","TheirMessage","lastMessage","message","isFirstMessageByUser","sender","backgroundImage","avatar","attachments","legth","src","file","alt","marginLeft","float","backgroundColor","MyMessage","marginRight","color","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","keys","Object","key","lastMessageKey","width","renderMessages","height","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","ReactDOM","render","document","getElementById"],"mappings":"qOAgDeA,EA5CG,WACd,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAEMC,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACjBD,EAAEE,iBAGIC,EAAa,CAAC,aAAc,uCAAwC,YAAaV,EAAU,cAAeE,GAJ/F,kBAORS,IAAMC,IAAI,kCAAmC,CAACC,QAASH,IAP/C,OAQdI,aAAaC,QAAQ,WAAYf,GACjCc,aAAaC,QAAQ,WAAYb,GAEjCc,OAAOC,SAASC,SAXF,kDAcbb,EAAS,oCAdI,0DAAH,sDAmBd,OACA,qBAAKc,UAAU,UAAf,SACI,sBAAKA,UAAU,OAAf,UACI,oBAAIA,UAAU,QAAd,mCACA,uBAAMC,SAAUd,EAAhB,UACI,uBAAOe,KAAK,OAAOC,MAAOtB,EAAUuB,SAAU,SAAChB,GAAD,OAAMN,EAAYM,EAAEiB,OAAOF,QAAQH,UAAU,QAAQM,YAAY,WAAWC,UAAQ,IAClI,uBAAOL,KAAK,WAAWC,MAAOpB,EAAUqB,SAAU,SAAChB,GAAD,OAAMJ,EAAYI,EAAEiB,OAAOF,QAAQH,UAAU,QAAQM,YAAY,YAAYC,UAAQ,IACvI,qBAAKC,MAAM,SAAX,SACI,wBAAQN,KAAK,SAASF,UAAU,SAAhC,SACI,sDAGR,oBAAIA,UAAU,QAAd,SAAuBf,a,gBCuB5BwB,EA3DK,SAACC,GACjB,MAAyB9B,mBAAS,IAAlC,mBAAOuB,EAAP,KAAaQ,EAAb,KACQC,EAAkBF,EAAlBE,OAAQC,EAAUH,EAAVG,MAEV1B,EAAe,SAAC2B,GAClBA,EAAMxB,iBAEN,IAAMyB,EAAOZ,EAAMa,OAEhBD,EAAKE,OAAS,GAAGC,YAAYL,EAAOD,EAAQ,CAAEG,SAEjDJ,EAAS,KAcb,OACI,uBAAMX,UAAU,eAAeC,SAAUd,EAAzC,UACI,uBACAa,UAAU,gBACVM,YAAY,oBACZH,MAAOA,EACPC,SAjBa,SAACU,GAClBH,EAASG,EAAMT,OAAOF,OAEtBgB,YAAST,EAAOE,IAeZX,SAAUd,IAGV,uBAAOiC,QAAQ,gBAAf,SACI,sBAAMC,SAAS,eAAf,SACI,cAACC,EAAA,EAAD,CAAiBtB,UAAU,qBAKnC,uBACAE,KAAK,OACLqB,UAAU,EACVC,GAAG,gBACHC,MAAO,CAAEC,QAAS,QAClBtB,SA1Ba,SAACU,GAClBI,YAAYL,EAAOD,EAAQ,CAACe,MAAOb,EAAMT,OAAOsB,MAAOZ,KAAK,QA4BxD,wBAAQb,KAAK,SAASF,UAAU,cAAhC,SACI,cAAC4B,EAAA,EAAD,CAAc5B,UAAU,oBCzBzB6B,EA9BM,SAAC,GAA6B,IAAD,IAA1BC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,QAC3BC,GAAwBF,GAAeA,EAAYG,OAAOpD,WAAakD,EAAQE,OAAOpD,SAE5F,OACI,sBAAKmB,UAAU,cAAf,UACKgC,GACG,qBACAhC,UAAU,iBACVyB,MAAO,CAACS,gBAAgB,OAAD,cAASH,QAAT,IAASA,GAAT,UAASA,EAASE,cAAlB,aAAS,EAAiBE,OAA1B,SAInB,OAAPJ,QAAO,IAAPA,GAAA,UAAAA,EAASK,mBAAT,eAAsBC,OAAQ,EAE9B,qBACAC,IAAKP,EAAQK,YAAY,GAAGG,KAC5BC,IAAI,qBACJxC,UAAU,gBACVyB,MAAO,CAACgB,WAAYT,EAAuB,MAAQ,UAE/C,qBAAKhC,UAAU,UAAUyB,MAAO,CAACiB,MAAO,OAAQC,gBAAiB,UAAWF,WAAYT,EAAuB,MAAQ,QAAvH,SACJD,EAAQhB,WCFN6B,EAnBG,SAAC,GAAe,IAAdb,EAAa,EAAbA,QAChB,OAAGA,EAAQK,aAAeL,EAAQK,YAAYC,MAAQ,EAE9C,qBACAC,IAAKP,EAAQK,YAAY,GAAGG,KAC5BC,IAAI,qBACJxC,UAAU,gBACVyB,MAAO,CAACiB,MAAO,WAKnB,qBAAK1C,UAAU,UAAUyB,MAAO,CAACiB,MAAO,QAASG,YAAa,OAAQC,MAAO,QAASH,gBAAiB,WAAvG,SACKZ,EAAQhB,QCyDNgC,EAhEC,SAACrC,GACb,IAAMsC,EAAyCtC,EAAzCsC,MAAOC,EAAkCvC,EAAlCuC,WAAYC,EAAsBxC,EAAtBwC,SAAUC,EAAYzC,EAAZyC,SAE7BC,EAAOJ,GAASA,EAAMC,GAEtBI,EAAqB,SAACtB,EAASuB,GACpC,OAASF,EAAKG,OAAOC,KAAI,SAACC,EAAQC,GAAT,aAAmBD,EAAOE,YAAc5B,EAAQP,IAClE,qBAEAxB,UAAU,eACVyB,MAAO,CACHiB,MAAOY,EAAc,QAAU,OAC/BpB,gBAAgB,OAAD,cAAQuB,QAAR,IAAQA,GAAR,UAAQA,EAAQA,cAAhB,aAAQ,EAAgBtB,OAAxB,OALnB,eACauB,QAmCrB,OAAIN,EAGA,sBAAKpD,UAAU,YAAf,UACI,sBAAKA,UAAU,uBAAf,UACI,qBAAKA,UAAU,aAAf,gBAA6BoD,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAMQ,QACtC,sBAAK5D,UAAU,gBAAf,UACKoD,EAAKG,OAAOC,KAAI,SAACC,GAAD,gBAAcA,EAAOA,OAAO5E,aADjD,UA/Bc,WACnB,IAAMgF,EAAOC,OAAOD,KAAKV,GAEzB,OAAOU,EAAKL,KAAI,SAACO,EAAKL,GAClB,IAAM3B,EAAUoB,EAASY,GACnBC,EAA2B,IAAVN,EAAc,KAAOG,EAAKH,EAAM,GACjDJ,EAAcJ,IAAanB,EAAQE,OAAOpD,SAEhD,OACI,sBAA0B4C,MAAO,CAACwC,MAAO,QAAzC,UACI,qBAAKjE,UAAU,gBAAf,SAEQsD,EAAc,cAAC,EAAD,CAAWvB,QAASA,IAAa,cAAC,EAAD,CAAcA,QAASA,EAASD,YAAaqB,EAASa,OAG7G,qBAAKhE,UAAU,gBAAgByB,MAAQ,CAAEoB,YAAaS,EAAc,OAAS,MAAOb,WAAYa,EAAc,MAAO,QAArH,SACOD,EAAmBtB,EAASuB,OAPvC,cAAiBI,OA0BrBQ,GACD,qBAAKzC,MAAO,CAAC0C,OAAQ,WACrB,qBAAKnE,UAAU,wBAAf,SACI,cAAC,EAAD,2BAAiBU,GAAjB,IAAwBE,OAAQqC,UAb1B,eC5BNmB,G,MAdH,WACR,OAAKzE,aAAa0E,QAAQ,YAGtB,cAAC,IAAD,CACAF,OAAO,QACPG,UAAU,uCACVpB,SAAUvD,aAAa0E,QAAQ,YAC/BE,WAAY5E,aAAa0E,QAAQ,YACjCG,eAAgB,SAACC,GAAD,OAAkB,cAAC,EAAD,eAAcA,OARL,cAAC,EAAD,MCJnDC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.98bc77b4.chunk.js","sourcesContent":["import { useState} from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nconst LoginForm = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError] = useState('');\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n    \r\n\r\n        const authObject = {'Project-Id': \"525c0517-6c72-4b39-8c7b-149a6fb60729\", 'User-Name': username, 'User-Secret': password };\r\n\r\n        try{\r\n           await axios.get('https://api.chatengine.io/chats', {headers: authObject});\r\n           localStorage.setItem('username', username);\r\n           localStorage.setItem('password', password);\r\n\r\n           window.location.reload();\r\n        }\r\n        catch (error) {\r\n            setError('Incorrect Credentials, TRY AGAIN')\r\n\r\n        }\r\n    }\r\n\r\n        return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"form\">\r\n                <h1 className=\"title\"> ChatRoom Application</h1>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input type=\"text\" value={username} onChange={(e)=> setUsername(e.target.value)} className=\"input\" placeholder=\"Username\" required/>\r\n                    <input type=\"password\" value={password} onChange={(e)=> setPassword(e.target.value)} className=\"input\" placeholder=\"Passsword\" required/>\r\n                    <div align=\"center\">\r\n                        <button type=\"submit\" className=\"button\">\r\n                            <span>Start Chatting</span> \r\n                        </button>\r\n                    </div>\r\n                    <h2 className=\"error\">{error}</h2>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default LoginForm;","import {useState} from 'react';\r\nimport {sendMessage, isTyping} from 'react-chat-engine';\r\nimport {SendOutlined, PictureOutlined} from '@ant-design/icons'\r\n\r\nconst MessageForm = (props) => {\r\n    const [value,setValue] = useState('');\r\n    const { chatId, creds } = props;\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const text = value.trim();\r\n\r\n        if(text.length > 0) sendMessage(creds, chatId, { text });\r\n\r\n        setValue('');\r\n\r\n    }\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n\r\n        isTyping(props, chatId);\r\n\r\n    };\r\n\r\n    const handleUpload = (event) => {\r\n        sendMessage(creds, chatId, {files: event.target.files, text:''});\r\n    };\r\n\r\n    return(\r\n        <form className=\"message-form\" onSubmit={handleSubmit}>\r\n            <input\r\n            className=\"message-input\"\r\n            placeholder=\"Send a Message...\"\r\n            value={value}\r\n            onChange={handleChange}\r\n            onSubmit={handleSubmit}\r\n            />\r\n\r\n            <label htmlFor=\"upload-button\">\r\n                <span clasName=\"image-button\">\r\n                    <PictureOutlined className=\"picture-icon\"/>\r\n\r\n                </span>\r\n\r\n            </label>\r\n            <input\r\n            type=\"file\"\r\n            multiple={false}\r\n            id=\"upload-button\"\r\n            style={{ display: 'none'}}\r\n            onChange={handleUpload}\r\n            />\r\n\r\n            <button type=\"submit\" className=\"send-button\">\r\n                <SendOutlined className=\"send-icon\"/>\r\n            </button>\r\n\r\n        </form>\r\n\r\n    );\r\n};\r\n\r\nexport default MessageForm;","const TheirMessage = ({ lastMessage, message}) => {\r\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\r\n    \r\n    return(\r\n        <div className=\"message-row\">\r\n            {isFirstMessageByUser && (\r\n                <div\r\n                className=\"message-avatar\"\r\n                style={{backgroundImage: `url(${message?.sender?.avatar})`}}\r\n                    />\r\n            )}\r\n\r\n            {message?.attachments?.legth > 0\r\n            ?(\r\n             <img\r\n             src={message.attachments[0].file}\r\n             alt=\"message-attachment\"\r\n             className=\"message-image\"\r\n             style={{marginLeft: isFirstMessageByUser ? '4px' : '48px'}}\r\n            />\r\n            ) : (<div className=\"message\" style={{float: 'left', backgroundColor: '#CABCDC', marginLeft: isFirstMessageByUser ? '4px' : '48px'}}>\r\n            {message.text}\r\n        </div> \r\n        )\r\n    }\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default TheirMessage;","const MyMessage = ({message}) => {\r\n    if(message.attachments && message.attachments.legth > 0){\r\n        return(\r\n            <img\r\n            src={message.attachments[0].file}\r\n            alt=\"message-attachment\"\r\n            className=\"message-image\"\r\n            style={{float: 'right'}}\r\n            />\r\n        );\r\n    }\r\n    return(\r\n        <div className=\"message\" style={{float: 'right', marginRight: '18px', color: 'white', backgroundColor: '#3B2A50'}}>\r\n            {message.text}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default MyMessage;","import MessageForm from './MessageForm';\r\nimport TheirMessage from './TheirMessage';\r\nimport MyMessage from './MyMessage';\r\n\r\n\r\n\r\nconst ChatFeed =(props) => {\r\n    const{chats, activeChat, userName, messages} = props;\r\n    \r\n    const chat = chats && chats[activeChat];\r\n\r\n    const renderReadReceipts = (message, isMyMessage) => {\r\n     return   chat.people.map((person, index) => person.last_read === message.id && (\r\n            <div\r\n            key={`read_${index}`}\r\n            className=\"read-receipt\"\r\n            style={{\r\n                float: isMyMessage ? 'right' : 'left',\r\n                backgroundImage:`url(${person?.person?.avatar})`\r\n            }}\r\n            />\r\n        ) )\r\n    }\r\n\r\n    const renderMessages = () => {\r\n        const keys = Object.keys(messages);\r\n        \r\n        return keys.map((key, index) => {\r\n            const message = messages[key];\r\n            const lastMessageKey = index === 0 ? null : keys[index-1];\r\n            const isMyMessage = userName === message.sender.username;\r\n       \r\n            return(\r\n                <div key={`msg_${index}`} style={{width: '100%' }} >\r\n                    <div className=\"message-block\">\r\n                        {\r\n                            isMyMessage ? <MyMessage message={message}/> : <TheirMessage message={message} lastMessage={messages[lastMessageKey]}/>\r\n                        }\r\n                    </div>\r\n                    <div className=\"read-receipts\" style= {{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px': '68px'}} >\r\n                          {renderReadReceipts(message, isMyMessage)}\r\n                </div>\r\n                </div>\r\n            );\r\n        });\r\n    };\r\n\r\n    \r\n\r\n    if(!chat) return 'Loading....';\r\n\r\n    return ( \r\n        <div className=\"chat-feed\">\r\n            <div className=\"chat-title-container\">\r\n                <div className=\"chat-title\">{chat?.title}</div>\r\n             <div className=\"chat-subtitle\">\r\n                 {chat.people.map((person)=> `${person.person.username}`)};\r\n             </div>\r\n            </div>\r\n           {renderMessages()} \r\n           <div style={{height: '100px'}}/>\r\n           <div className=\"message-for-container\">\r\n               <MessageForm {...props} chatId={activeChat}/>\r\n           </div>\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default ChatFeed;","import {ChatEngine} from 'react-chat-engine';\r\n\r\nimport LoginForm from './components/LoginForm';\r\n\r\nimport ChatFeed from './components/ChatFeed';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n    if (!localStorage.getItem('username'))  return <LoginForm/>\r\n\r\n    return(\r\n        <ChatEngine\r\n        height=\"100vh\"\r\n        projectID=\"525c0517-6c72-4b39-8c7b-149a6fb60729\"\r\n        userName={localStorage.getItem('username')}\r\n        userSecret={localStorage.getItem('password')}\r\n        renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps}/>}\r\n        />\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}